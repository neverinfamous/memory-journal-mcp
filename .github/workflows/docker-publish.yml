name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: writenotenow/memory-journal-mcp

permissions:
  contents: read
  packages: write
  security-events: write  # For security scanning
  pull-requests: write    # For PR comments

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install optional dependencies for full testing
        pip install sentence-transformers faiss-cpu || echo "Optional ML dependencies failed, continuing..."
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test server import
      run: |
        cd src
        python -c "import server; print('✅ Server imports successfully')"
    
    - name: Test database schema
      run: |
        cd src  
        python -c "
        import sqlite3
        import server
        # Test database initialization
        conn = sqlite3.connect(':memory:')
        with open('schema.sql', 'r') as f:
            conn.executescript(f.read())
        print('✅ Database schema loads successfully')
        conn.close()
        "

  build:
    runs-on: ubuntu-latest
    needs: test  # Only build if tests pass
    strategy:
      matrix:
        variant:
          - name: alpine
            dockerfile: Dockerfile.alpine
            platforms: linux/amd64,linux/arm64
          - name: latest
            dockerfile: Dockerfile
            platforms: linux/amd64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      continue-on-error: true  # Don't fail if Docker Hub credentials are missing
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=false
        tags: |
          type=raw,value=${{ matrix.variant.name }}
          # type=semver,pattern={{version}}-${{ matrix.variant.name }}
          # type=semver,pattern={{major}}.{{minor}}-${{ matrix.variant.name }}

    # Build locally first for security scanning (single platform)
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant.dockerfile }}
        platforms: linux/amd64  # Single platform for scanning
        push: false
        load: true
        tags: local-scan:${{ matrix.variant.name }}
        cache-from: type=gha

    # Security scanning with Docker Scout CLI (no Docker Hub credentials needed for local scan)
    - name: Docker Scout security scan
      run: |
        # Install Docker Scout CLI
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
        
        # Run security scan - block on critical and high severity issues
        docker scout cves local-scan:${{ matrix.variant.name }} --severity critical,high --exit-code

    # Only push if security scan passes
    - name: Build and push Docker image
      if: success()
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant.dockerfile }}
        platforms: ${{ matrix.variant.platforms }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image functionality
      if: github.event_name != 'pull_request'
      run: |
        # Extract the first tag from the metadata output
        FIRST_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        echo "Testing image: $FIRST_TAG"
        
        # Test that the image starts and server imports work
        docker run --rm $FIRST_TAG python -c "
        import sys
        sys.path.append('src')
        try:
            import server
            print('✅ ${{ matrix.variant.name }} image: Server imports successfully')
        except ImportError as e:
            print(f'❌ Import failed: {e}')
            sys.exit(1)
        "
        
        echo "✅ ${{ matrix.variant.name }} image tests passed"

    # Docker Hub description update removed to eliminate secret warnings
    # README.md can be updated manually on Docker Hub if needed

